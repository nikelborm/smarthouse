import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';
import { Client } from '.';

// энкрипшн модуль это такая хуйня, которая отвечает за всю безопасность при взаимодействии между клиентом и шлюзом

// она подключается ещщё на этапе обмена хендшейками, когда клиент отправляет манифест
// там указывает uuid айдишник модуля шифрования, этот модуль сразу валидирует то что прислал клиент
// То есть этот модуль уже имеет метод для валидации хендшейка

// далее когда хендшейк отвалидирован, надо сгенерить то что отправить в ответ клиенту как креденшалы
// это второй метод, который возвращает то что отправить клиенту и какой обьект креденшалов сохранить в бд

// далее при обращении клиентом допустим если это вебсокеты, то приходящие сообщения нужно чем-то расшифровывать
// в соединении будет торчать хуйня о том кто клиент и какой модуль шифрования используется
// и будет получать соответсвующий класс шифрования и будет давать нам уже нормальное сообщение

// Дальше, когда мы захотим послать сообщение на клиент, мы точно также заюзаем модуль шифрования, в метод которого передадим всю нужную инфу

@Entity({ name: 'encryption_module' })
export class EncryptionModule {
  @PrimaryGeneratedColumn({ name: 'encryption_module_id' })
  id!: number;

  @Column({
    name: 'encryption_module_uuid',
    type: 'uuid',
    nullable: false,
    unique: true,
  })
  uuid!: string;

  @Column({
    name: 'encryption_module_name',
    nullable: false,
  })
  name!: string;

  @OneToMany(() => Client, (client) => client.encryptionModule)
  clients!: Client[];
}

// По умолчанию будут включены следующие алгоритмы шифрования
// 'nothing': 'ca4e23ec-f2a4-4d78-aa94-2065d72d5824'
// 'rsa512': '92782e54-ac5b-4787-b940-2fd0978fc4b8'
// 'aes128': '6b8d962d-ac90-4719-8ae8-a5da728b750d'
